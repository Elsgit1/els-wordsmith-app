name: wordsmith-web code scans

on:
  push:
    branches: ["main"]
    paths:
    - 'web/**'
  workflow_dispatch:

env:
  AWS_REGION: us-west-1
  REPOSITORY: wordsmith-web

jobs:
  wordsmith-web-code-scans:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.20'

    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-


    - name: Build Go application
      working-directory: web
      run: |
          go mod tidy
          go build -o myapp .
    
    - name: Run Snyk Open Source Scan
      working-directory: web
      run: snyk test --all-projects --severity-threshold=medium --json > snyk-results.json
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

    - name: Check Snyk Results
      working-directory: web
      run: |
          vulnerability_count=$(jq '.vulnerabilities | length' snyk-results.json)
          if [ $vulnerability_count -gt 5 ]; then
          echo "SCA scan failed: More than 5 vulnerabilities found"
          exit 1
          fi
    
    - name: Setup Git
      run: |
        git config --global user.name 'github-actions'
        git config --global user.email 'github-actions@github.com'

    
      ################################################################
      ###               DETERMINE NEXT VERSION                     ###
      ###   Used for creating new releases and image tags          ###
      ################################################################
    - name: Determine Next Version
      id: next_version
      run: |
        # Fetch all tags
        git fetch --tags

        # Get the latest tag, assume semver, and sort.
        LATEST_TAG=$(git tag -l | grep -E '^v[0-9]+\.[0-9]+\.[0-9]+$' | sort -V | tail -n1)

        # If there's no tag yet, start with v1.0.0.
        if [ -z "$LATEST_TAG" ]; then
          LATEST_TAG="v1.0.0"
        fi

        # Increment the patch version
        NEXT_TAG=$(echo $LATEST_TAG | awk -F. '{print $1"."$2"."$3+1}')

        # Output the next version
        echo "::set-output name=tag::$NEXT_TAG"
        echo "Next version: $NEXT_TAG"

    
      ################################################################
      ###                     CREATE RELEASE                       ###
      ###  Creating release with the tag from the previous step    ###
      ################################################################
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.ACCESS_TOKEN }}
      with:
        tag_name: ${{ steps.next_version.outputs.tag }}
        release_name: wordsmith-web ${{ steps.next_version.outputs.tag }}
        draft: false
        prerelease: false

    

      ################################################################
      ###                  BUILD DOCKER IMAGE                      ###
      ###         Build Docker image from the Dockefile            ###
      ################################################################
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Log in to Docker Hub

      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_PASSWORD }}

    - name: Build Docker image
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: ${{ env.REPOSITORY }}
        IMAGE_TAG: ${{ steps.next_version.outputs.tag }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -f web/Dockerfile web
        echo "IMAGE_NAME=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_ENV
        echo "::set-output name=name::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

    
      ###########################################################
      ###  Docker image Snyk scan & sonarcloud analysis       ###
      ###########################################################               
    - name: Run Snyk to check Docker image for vulnerabilities
      uses: snyk/actions/docker@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        image: ${{ steps.build-image.outputs.name }}
        args: --severity-threshold=high --policy-path=.snyk --file=web/Dockerfile
      continue-on-error: true

    - name: SonarCloud Scan
      uses: SonarSource/sonarcloud-github-action@master
      with:
        args: >
          -Dsonar.projectKey=Elsgit1_els-wordsmith-app -Dsonar.organization=elsgit1 -Dsonar.host.url=https://sonarcloud.io -Dsonar.sources=web
      env:
        GITHUB_TOKEN: ${{ secrets.ACCESS_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
